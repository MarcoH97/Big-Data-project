density_plot_different_subsamples
density_plot_different_subsamples <- ggplot(data = df_means_different_samples_500_runs) +   geom_density(aes(x = means_100_subsamples_500_runs, color="means_softdrug_100_subsamples")) +
geom_density(aes(x = means_500_subsamples_500_runs), color="means_softdrug_500_subsamples") +
geom_density(aes(x = means_2500_subsamples_500_runs), color="means_softdrug_2500_subsamples") +
labs(title="Density estimate for different subsample sizes (500 draws)", x="Mean soft drug consumption", y = "Density") +
scale_colour_manual(name="", values = c("test"="red", "test2"="blue", "test3"="green")) +
theme(legend.position="bottom")
density_plot_different_subsamples
density_plot_different_subsamples <- ggplot(data = df_means_different_samples_500_runs) +   geom_density(aes(x = means_100_subsamples_500_runs, color="means_100_subsamples_500_runs")) +
geom_density(aes(x = means_500_subsamples_500_runs), color="means_500_subsamples_500_runs") +
geom_density(aes(x = means_2500_subsamples_500_runs), color="means_2500_subsamples_500_runs") +
labs(title="Density estimate for different subsample sizes (500 draws)", x="Mean soft drug consumption", y = "Density") +
scale_colour_manual(name="", values = c("red", "blue", "green")) +
theme(legend.position="bottom")
density_plot_different_subsamples
density_plot_different_subsamples <- ggplot(data = df_means_different_samples_500_runs) +   geom_density(aes(x = means_100_subsamples_500_runs, color="test1")) +
geom_density(aes(x = means_500_subsamples_500_runs), color="test2") +
geom_density(aes(x = means_2500_subsamples_500_runs), color="test3") +
labs(title="Density estimate for different subsample sizes (500 draws)", x="Mean soft drug consumption", y = "Density") +
scale_colour_manual(name="", values = c("red", "blue", "green")) +
theme(legend.position="bottom")
density_plot_different_subsamples
View(df_means_different_samples_500_runs)
View(df_means_different_samples_500_runs)
density_plot_different_subsamples <- ggplot(data = df_means_different_samples_500_runs) +   geom_density(aes(x = means_100_subsamples_500_runs, color="means_softdrug_100_subsamples")) +
geom_density(aes(x = means_500_subsamples_500_runs), color="means_softdrug_500_subsamples") +
geom_density(aes(x = means_2500_subsamples_500_runs), color="means_softdrug_2500_subsamples") +
labs(title="Density estimate for different subsample sizes (500 draws)", x="Mean soft drug consumption", y = "Density") +
scale_colour_manual(name="", values = c("red", "blue", "green")) +
theme(legend.position="bottom")
density_plot_different_subsamples
density_plot_different_subsamples <- ggplot(data = df_means_different_samples_500_runs) +   geom_density(aes(x = means_100_subsamples_500_runs, color="means_softdrug_100_subsamples")) +
geom_density(aes(x = means_500_subsamples_500_runs), color="means_softdrug_500_subsamples") +
geom_density(aes(x = means_2500_subsamples_500_runs), color="means_softdrug_2500_subsamples") +
labs(title="Density estimate for different subsample sizes (500 draws)", x="Mean soft drug consumption", y = "Density") +
theme(legend.position="bottom")
density_plot_different_subsamples
density_plot_different_subsamples <- ggplot(data = df_means_different_samples_500_runs) +   geom_density(aes(x = means_100_subsamples_500_runs, color="means_softdrug_100_subsamples")) +
geom_density(aes(x = means_500_subsamples_500_runs, color="means_softdrug_500_subsamples")) +
geom_density(aes(x = means_2500_subsamples_500_runs, color="means_softdrug_2500_subsamples")) +
labs(title="Density estimate for different subsample sizes (500 draws)", x="Mean soft drug consumption", y = "Density") +
scale_colour_manual(name="", values = c("red", "blue", "green")) +
theme(legend.position="bottom")
density_plot_different_subsamples
density_plot_different_runs <- ggplot(data = df_means_500_subsamples_different_runs) +
geom_density(aes(x = means_500_subsamples_100_runs, color="means_softdrug_100_subsamples")) +
geom_density(aes(x = means_500_subsamples_500_runs, color="means_softdrug_500_subsamples")) +
geom_density(aes(x = means_500_subsamples_2500_runs, color="means_softdrug_2500_subsamples")) +
labs(title="Density estimate for different number of draws (500 subsamples)", x="Mean soft drug consumption", y = "Density") +
scale_colour_manual(name="", values = c("red", "blue", "green")) +
theme(legend.position="bottom")
density_plot_different_draws
density_plot_different_runs <- ggplot(data = df_means_500_subsamples_different_runs) +
geom_density(aes(x = means_500_subsamples_100_runs, color="means_softdrug_100_subsamples")) +
geom_density(aes(x = means_500_subsamples_500_runs, color="means_softdrug_500_subsamples")) +
geom_density(aes(x = means_500_subsamples_2500_runs, color="means_softdrug_2500_subsamples")) +
labs(title="Density estimate for different number of draws (500 subsamples)", x="Mean soft drug consumption", y = "Density") +
scale_colour_manual(name="", values = c("red", "blue", "green")) +
theme(legend.position="bottom")
density_plot_different_runs
density_plot_different_runs <- ggplot(data = df_means_500_subsamples_different_runs) +
geom_density(aes(x = means_500_subsamples_100_runs, color="means_softdrug_100_draws")) +
geom_density(aes(x = means_500_subsamples_500_runs, color="means_softdrug_500_draws")) +
geom_density(aes(x = means_500_subsamples_2500_runs, color="means_softdrug_2500_draws")) +
labs(title="Density estimate for different number of draws (500 subsamples)", x="Mean soft drug consumption", y = "Density") +
scale_colour_manual(name="", values = c("red", "blue", "green")) +
theme(legend.position="bottom")
density_plot_different_runs
density_plot_different_runs <- ggplot(data = df_means_500_subsamples_different_runs) +
geom_density(aes(x = means_500_subsamples_100_runs, color="means_softdrug_100_draws")) +
geom_density(aes(x = means_500_subsamples_500_runs, color="means_softdrug_500_draws")) +
geom_density(aes(x = means_500_subsamples_2500_runs, color="means_softdrug_2500_draws")) +
labs(title="Density estimate for different number of draws (500 subsamples)", x="Mean soft drug consumption", y = "Density") +
scale_colour_manual(name="", values = c("red", "blue", "green")) +
theme(legend.position="bottom")
density_plot_different_runs
density_plot_different_subsamples <- ggplot(data = df_means_different_samples_500_runs) +   geom_density(aes(x = means_100_subsamples_500_runs, color="means_softdrug_100_subsamples")) +
geom_density(aes(x = means_500_subsamples_500_runs, color="means_softdrug_500_subsamples")) +
geom_density(aes(x = means_2500_subsamples_500_runs, color="means_softdrug_2500_subsamples")) +
labs(title="Density estimate for different subsample sizes (500 draws)", x="Mean soft drug consumption", y = "Density") +
scale_colour_manual(name="", values = c("red", "blue", "green")) +
theme(legend.position="top")
density_plot_different_subsamples
density_plot_different_runs
density_plot_different_runs <- ggplot(data = df_means_500_subsamples_different_runs) +
geom_density(aes(x = means_500_subsamples_100_runs)) +
geom_density(aes(x = means_500_subsamples_500_runs)) +
geom_density(aes(x = means_500_subsamples_2500_runs)) +
labs(title="Density estimate for different number of draws (500 subsamples)", x="Mean soft drug consumption", y = "Density") +
theme(legend.position="top")
density_plot_different_runs
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
suppressPackageStartupMessages(library(rmarkdown))
suppressPackageStartupMessages(library(tinytex))
suppressPackageStartupMessages(library(installr))
load("drugs.Rdata")
# if package not installed yet:
# install.packages("glmnet", repos = "https://cran.us.r-project.org")
library(glmnet)
# if package not installed yet:
# install.packages("corrplot", repos = "https://cran.us.r-project.org")
library(corrplot)
# if package not installed yet:
# install.packages("ggplot2", repos =	"https://CRAN.R-project.org/package=ggplot2")
library(ggplot2)
# if package not installed yet:
# install.packages("dplyr")
library(dplyr)
# class of dataset "train"
class(drugs)
# number of males
males = sum(drugs$Gender=="male")
males
# number of males who consume soft drugs
males_softdrug = sum(drugs$Gender=="male" & drugs$Soft_Drug=="TRUE")
males_softdrug
males_softdrug / males
# number of males who consume soft drugs
males_harddrug = sum(drugs$Gender=="male" & drugs$Hard_Drug=="TRUE")
males_harddrug
# number of females
females = sum(drugs$Gender=="female")
females
# number of females who consume soft drugs
females_harddrug = sum(drugs$Gender=="female" & drugs$Hard_Drug=="TRUE")
females_harddrug
# share of male hard drug consumers
share_males_harddrug = males_harddrug / males
share_males_harddrug
# share of female hard drug consumers
share_females_harddrug = females_harddrug / females
share_females_harddrug
# difference between the share of male and female hard drug consumers (in percentage points)
print(share_males_harddrug - share_females_harddrug)
# just FYI: overview of Age groups and Soft_Drug groups
drugs %>% count(Age, Soft_Drug)
# calculate relative shares
share_age16_softdrug = sum(drugs$Age=="16-17 years" & drugs$Soft_Drug=="TRUE") / sum(drugs$Age=="16-17 years")
share_age18_softdrug = sum(drugs$Age=="18-19 years" & drugs$Soft_Drug=="TRUE") / sum(drugs$Age=="18-19 years")
share_age20_softdrug = sum(drugs$Age=="20-24 years"& drugs$Soft_Drug=="TRUE") / sum(drugs$Age=="20-24 years")
print(paste("share of 16-17 year-olds who consume soft drugs: ", round(share_age16_softdrug, 4)))
print(paste("share of 18-19 year-olds who consume soft drugs: ", round(share_age18_softdrug, 4)))
print(paste("share of 20-24 year-olds who consume soft drugs: ", round(share_age20_softdrug, 4)))
print("Tabulating the observations by earnings category (rows) and soft drug consumption (columns):")
table_earnings_softdrug = table(drugs$Earning, drugs$Soft_Drug, useNA = "always")
names(dimnames(table_earnings_softdrug)) <- c("Earnings", "Soft drug consumption")
table_earnings_softdrug
# Perform a chi-squared test to evaluate whether soft drug consumption is independent of the earnings
chisq.test(drugs$Earning, drugs$Soft_Drug)
# just FYI: overview of total soft drug consumption
drugs %>%
count(Soft_Drug)
# 500 times: draw random subsample of 500 observations in your dataset
n_subsample <- 500
repetitions <- 500
subsample <- data.frame(matrix(ncol = 0, nrow = 0))
means_subsamples = c()
for (i in 1:repetitions)
{
subsample <- rbind(subsample, drugs %>% slice_sample(n = n_subsample))
means_subsamples = append(means_subsamples, sum(subsample$Soft_Drug=="TRUE") / sum(subsample$Soft_Drug=="TRUE" | subsample$Soft_Drug=="FALSE"))
subsample <- subsample[0, ]
}
# plot histogram
ggplot(as.data.frame(means_subsamples), aes(x=means_subsamples)) +
geom_histogram(binwidth=0.01, color="black", fill="white") +
labs(title="",
x="Subsample means",
y="Frequency")
# Are the recorded subsample means close to the average drug consumption in the full sample?
# --> Average soft drug consumption in population (full sample):
average_softdrug = sum(drugs$Soft_Drug=="TRUE") / sum(drugs$Soft_Drug=="TRUE" | drugs$Soft_Drug=="FALSE")
average_softdrug
function_means_subsamples <- function(data, size_subsample, n_runs)
{
sample <- data.frame(matrix(ncol = 0, nrow = 0))
means_sample = c()
for (i in 1:n_runs)
{
sample <- rbind(sample, data %>% slice_sample(n = size_subsample))
means_sample = append(means_sample, sum(sample$Soft_Drug=="TRUE") / sum(sample$Soft_Drug=="TRUE" | sample$Soft_Drug=="FALSE"))
sample <- sample[0, ]
}
return(means_sample)
}
means_100_subsamples_100_runs <- function_means_subsamples(data = drugs,
size_subsample = 100,
n_runs = 100)
means_500_subsamples_500_runs <- function_means_subsamples(data = drugs,
size_subsample = 500,
n_runs = 500)
means_2500_subsamples_2500_runs <- function_means_subsamples(data = drugs,
size_subsample = 2500,
n_runs = 2500)
means_100_subsamples_500_runs <- function_means_subsamples(data = drugs,
size_subsample = 100,
n_runs = 500)
means_500_subsamples_500_runs <- function_means_subsamples(data = drugs,
size_subsample = 500,
n_runs = 500)
means_2500_subsamples_500_runs <- function_means_subsamples(data = drugs,
size_subsample = 2500,
n_runs = 500)
df_means_different_samples_500_runs <- as.data.frame(means_100_subsamples_500_runs)
View(df_means_different_samples_500_runs)
View(df_means_different_samples_500_runs)
df_means_different_samples_500_runs <- cbindX(df_means_different_samples_500_runs, as.data.frame(means_500_subsamples_500_runs), as.data.frame(means_2500_subsamples_500_runs))
View(df_means_different_samples_500_runs)
View(df_means_different_samples_500_runs)
View(df_means_different_samples_500_runs)
View(df_means_different_samples_500_runs)
density_plot_different_subsamples <- ggplot(data = df_means_different_samples_500_runs) +   geom_density(aes(x = means_100_subsamples_500_runs, color="means_100_subsamples_500_runs")) +
geom_density(aes(x = means_500_subsamples_500_runs, color="means_500_subsamples_500_runs")) +
geom_density(aes(x = means_2500_subsamples_500_runs, color="means_2500_subsamples_500_runs")) +
labs(title="Density estimate for different subsample sizes (500 draws)", x="Mean soft drug consumption", y = "Density") +
scale_colour_manual(name="", values = c("red", "blue", "green")) +
theme(legend.position="top")
density_plot_different_subsamples
density_plot_different_subsamples <- ggplot(data = df_means_different_samples_500_runs) +   geom_density(aes(x = means_100_subsamples_500_runs, color="test1")) +
geom_density(aes(x = means_500_subsamples_500_runs, color="test2")) +
geom_density(aes(x = means_2500_subsamples_500_runs, color="test3")) +
labs(title="Density estimate for different subsample sizes (500 draws)", x="Mean soft drug consumption", y = "Density") +
scale_colour_manual(name="", values = c("red", "blue", "green")) +
theme(legend.position="top")
density_plot_different_subsamples
density_plot_different_subsamples <- ggplot(data = df_means_different_samples_500_runs) +   geom_density(aes(x = means_100_subsamples_500_runs, color="means_softdrugs_100_subsamples")) +
geom_density(aes(x = means_500_subsamples_500_runs, color="means_softdrugs_500_subsamples")) +
geom_density(aes(x = means_2500_subsamples_500_runs, color="means_softdrugs_2500_subsamples")) +
labs(title="Density estimate for different subsample sizes (500 draws)", x="Mean soft drug consumption", y = "Density") +
scale_colour_manual(name="", values = c("red", "blue", "green")) +
theme(legend.position="top")
density_plot_different_subsamples
density_plot_different_subsamples <- ggplot(data = df_means_different_samples_500_runs) +   geom_density(aes(x = means_100_subsamples_500_runs, color="100 subsamples")) +
geom_density(aes(x = means_500_subsamples_500_runs, color="500 subsamples")) +
geom_density(aes(x = means_2500_subsamples_500_runs, color="2500 subsamples")) +
labs(title="Density estimate for different subsample sizes (500 draws)", x="Mean soft drug consumption", y = "Density") +
scale_colour_manual(name="", values = c("red", "blue", "green")) +
theme(legend.position="top")
density_plot_different_subsamples
View(df_means_different_samples_500_runs)
View(df_means_different_samples_500_runs)
df_means_different_samples_500_runs <- factor(df_means_different_samples_500_runs, levels = c("means_softdrug_100_subsamples", "means_softdrug_500_subsamples", "means_softdrug_2500_subsamples"))
density_plot_different_subsamples <- ggplot(data = df_means_different_samples_500_runs) +   geom_density(aes(x = means_100_subsamples_500_runs, color="100 subsamples")) +
geom_density(aes(x = means_500_subsamples_500_runs, color="500 subsamples")) +
geom_density(aes(x = means_2500_subsamples_500_runs, color="2500 subsamples")) +
labs(title="Density estimate for different subsample sizes (500 draws)", x="Mean soft drug consumption", y = "Density") +
scale_colour_manual(name="", values = c("red", "blue", "green")) +
theme(legend.position="top")
df_means_different_samples_500_runs <- as.data.frame(means_100_subsamples_500_runs)
df_means_different_samples_500_runs <- cbindX(df_means_different_samples_500_runs, as.data.frame(means_500_subsamples_500_runs), as.data.frame(means_2500_subsamples_500_runs))
density_plot_different_subsamples <- ggplot(data = df_means_different_samples_500_runs) +   geom_density(aes(x = means_100_subsamples_500_runs, color="100 subsamples")) +
geom_density(aes(x = means_500_subsamples_500_runs, color="500 subsamples")) +
geom_density(aes(x = means_2500_subsamples_500_runs, color="2500 subsamples")) +
labs(title="Density estimate for different subsample sizes (500 draws)", x="Mean soft drug consumption", y = "Density") +
scale_colour_manual(name="", values = c("red", "blue", "green")) +
scale_fill_discrete(breaks=c('100 subsamples', '500 subsamples', '2500 subsamples')) +
theme(legend.position="top")
density_plot_different_subsamples
density_plot_different_subsamples <- ggplot(data = df_means_different_samples_500_runs) +   geom_density(aes(x = means_100_subsamples_500_runs, color="100 subsamples")) +
geom_density(aes(x = means_500_subsamples_500_runs, color="500 subsamples")) +
geom_density(aes(x = means_2500_subsamples_500_runs, color="2500 subsamples")) +
labs(title="Density estimate for different subsample sizes (500 draws)", x="Mean soft drug consumption", y = "Density") +
scale_colour_manual(name="", values = c("red", "blue", "green")) +
scale_color_discrete(breaks=c('100 subsamples', '500 subsamples', '2500 subsamples')) +
theme(legend.position="top")
density_plot_different_subsamples
density_plot_different_subsamples <- ggplot(data = df_means_different_samples_500_runs) +   geom_density(aes(x = means_100_subsamples_500_runs, color="100 subsamples")) +
geom_density(aes(x = means_500_subsamples_500_runs, color="500 subsamples")) +
geom_density(aes(x = means_2500_subsamples_500_runs, color="2500 subsamples")) +
labs(title="Density estimate for different subsample sizes (500 draws)", x="Mean soft drug consumption", y = "Density") +
scale_colour_manual(name="", values = c("red", "green", "blue")) +
scale_color_discrete(breaks=c('100 subsamples', '500 subsamples', '2500 subsamples')) +
theme(legend.position="top")
density_plot_different_subsamples
density_plot_different_runs <- ggplot(data = df_means_500_subsamples_different_runs) +   geom_density(aes(x = means_500_subsamples_100_runs, color="100 draws")) +
geom_density(aes(x = means_500_subsamples_500_runs, color="500 draws")) +
geom_density(aes(x = means_500_subsamples_2500_runs, color="2500 draws")) +
labs(title="Density estimate for different number of draws (500 subsamples)", x="Mean soft drug consumption", y = "Density") +
scale_colour_manual(name="", values = c("red", "green", "blue")) +
scale_color_discrete(breaks=c('100 draws', '500 draws', '2500 draws')) +
theme(legend.position="top")
# second kernel: fixing subsample size at 500; visualizing density estimate for the three different number of draws.
means_500_subsamples_100_runs <- function_means_subsamples(data = drugs,
size_subsample = 500,
n_runs = 100)
means_500_subsamples_500_runs <- function_means_subsamples(data = drugs,
size_subsample = 500,
n_runs = 500)
means_500_subsamples_500_runs <- function_means_subsamples(data = drugs,
size_subsample = 500,
n_runs = 500)
means_500_subsamples_2500_runs <- function_means_subsamples(data = drugs,
size_subsample = 500,
n_runs = 2500)
df_means_500_subsamples_different_runs <- as.data.frame(means_500_subsamples_100_runs)
df_means_500_subsamples_different_runs <- cbindX(df_means_500_subsamples_different_runs, as.data.frame(means_500_subsamples_500_runs), as.data.frame(means_500_subsamples_2500_runs))
density_plot_different_runs <- ggplot(data = df_means_500_subsamples_different_runs) +   geom_density(aes(x = means_500_subsamples_100_runs, color="100 draws")) +
geom_density(aes(x = means_500_subsamples_500_runs, color="500 draws")) +
geom_density(aes(x = means_500_subsamples_2500_runs, color="2500 draws")) +
labs(title="Density estimate for different number of draws (500 subsamples)", x="Mean soft drug consumption", y = "Density") +
scale_colour_manual(name="", values = c("red", "green", "blue")) +
scale_color_discrete(breaks=c('100 draws', '500 draws', '2500 draws')) +
theme(legend.position="top")
density_plot_different_runs
density_plot_different_subsamples
density_plot_different_subsamples <- ggplot(data = df_means_different_samples_500_runs) +   geom_density(aes(x = means_100_subsamples_500_runs, color="100 subsamples")) +
geom_density(aes(x = means_500_subsamples_500_runs, color="500 subsamples")) +
geom_density(aes(x = means_2500_subsamples_500_runs, color="2500 subsamples")) +
labs(title="Density estimate for different subsample sizes (500 draws)", x="Mean soft drug consumption", y = "Density") +
xlim(0.20, 0.60) +
ylim(0,50) +
scale_colour_manual(name="", values = c("red", "green", "blue")) +
scale_color_discrete(breaks=c('100 subsamples', '500 subsamples', '2500 subsamples')) +
theme(legend.position="top")
density_plot_different_subsamples
density_plot_different_runs <- ggplot(data = df_means_500_subsamples_different_runs) +   geom_density(aes(x = means_500_subsamples_100_runs, color="100 draws")) +
geom_density(aes(x = means_500_subsamples_500_runs, color="500 draws")) +
geom_density(aes(x = means_500_subsamples_2500_runs, color="2500 draws")) +
labs(title="Density estimate for different number of draws (500 subsamples)", x="Mean soft drug consumption", y = "Density") +
xlim(0.20, 0.60) +
ylim(0,50) +
scale_colour_manual(name="", values = c("red", "green", "blue")) +
scale_color_discrete(breaks=c('100 draws', '500 draws', '2500 draws')) +
theme(legend.position="top")
density_plot_different_runs
density_plot_different_subsamples <- ggplot(data = df_means_different_samples_500_runs) +   geom_density(aes(x = means_100_subsamples_500_runs, color="100 subsamples")) +
geom_density(aes(x = means_500_subsamples_500_runs, color="500 subsamples")) +
geom_density(aes(x = means_2500_subsamples_500_runs, color="2500 subsamples")) +
labs(title="Density estimate for different subsample sizes (500 draws)", x="Mean soft drug consumption", y = "Density") +
xlim(0.20, 0.60) +
ylim(0,50) +
scale_colour_manual(name="", values = c("red", "green", "blue")) +
scale_color_discrete(breaks=c('100 subsamples', '500 subsamples', '2500 subsamples')) +
theme(legend.position="top")
density_plot_different_subsamples
# second kernel: visualizing density estimate for the three different number of draws
density_plot_different_runs <- ggplot(data = df_means_500_subsamples_different_runs) +   geom_density(aes(x = means_500_subsamples_100_runs, color="100 draws")) +
geom_density(aes(x = means_500_subsamples_500_runs, color="500 draws")) +
geom_density(aes(x = means_500_subsamples_2500_runs, color="2500 draws")) +
labs(title="Density estimate for different number of draws (500 subsamples)", x="Mean soft drug consumption", y = "Density") +
xlim(0.20, 0.60) +
ylim(0,50) +
scale_colour_manual(name="", values = c("red", "green", "blue")) +
scale_color_discrete(breaks=c('100 draws', '500 draws', '2500 draws')) +
theme(legend.position="top")
density_plot_different_runs
# Load packages
library(combinat)
library(foreach)
library(doParallel)
library(readxl)
library(progress)
library(dplyr)
library(parallel)
library(future.apply)
library(progressr)
library(RSQLite)
library(DBI)
library(ggplot2)
library(reshape2)
library(scales)
# Get the directory path of the current code
PATH <- dirname(rstudioapi::getSourceEditorContext()$path)
# Set the working directory to where the code is
setwd(PATH)
# Import the excel file
# data <- read_excel("C:/Users/marco/Documents/HSG/Big Data/BDBD_data.xlsx")
# Remove rows with NA
data <- na.omit(data)
#data$Dates <- as.Date(data$Dates)
# Set the first column as row index
#rownames(data) <- data[,1]
# Remove the first column from the data frame
data <- data[, -1]
# Plotting the data
# Define the desired legend title and labels
legend_title <- "Type of generation"
legend_labels <- c("Normal Runtime", "Parallel Runtime")
ggplot(runtime_df, aes(x = Combinations)) +
geom_line(aes(y = Normal_Runtime, color = "Normal R"), size = 1) +
geom_line(aes(y = Parallel_Runtime, color = "Parallel Processing"), size = 1) +
labs(title = "Runtime Comparison for data generation",
x = "Combinations",
y = "Runtime (minuites)",
color = legend_title) +
theme_bw() +
theme(plot.title =  element_text(size= 14, hjust = 0.5, face ="bold"),
axis.text.x = element_text(angle = 90, hjust = 1, face = "bold"),
axis.text.y = element_text(angle = 90, hjust = 1, face = "bold"),
legend.position = "right")
runtime_df <- data.frame(Combinations = combinations, Normal_Runtime = normal_runtime, Parallel_Runtime = parallel_runtime)
# Plot the runtime differences
# Create the data
combinations <- c(2, 3, 4, 5)
normal_runtime <- c(0.001279648, 0.018118033, 0.231115833, 8.696434)
#c(0.07677889, 1.087082, 13.86695, 521.78604)
parallel_runtime <- c(0.019332633, 0.061772267, 0.342696167, 1.232462)
#c(1.159958, 3.706336, 20.56177, 73.94772)
runtime_df <- data.frame(Combinations = combinations, Normal_Runtime = normal_runtime, Parallel_Runtime = parallel_runtime)
# Plotting the data
# Define the desired legend title and labels
legend_title <- "Type of generation"
legend_labels <- c("Normal Runtime", "Parallel Runtime")
ggplot(runtime_df, aes(x = Combinations)) +
geom_line(aes(y = Normal_Runtime, color = "Normal R"), size = 1) +
geom_line(aes(y = Parallel_Runtime, color = "Parallel Processing"), size = 1) +
labs(title = "Runtime Comparison for data generation",
x = "Combinations",
y = "Runtime (minuites)",
color = legend_title) +
theme_bw() +
theme(plot.title =  element_text(size= 14, hjust = 0.5, face ="bold"),
axis.text.x = element_text(angle = 90, hjust = 1, face = "bold"),
axis.text.y = element_text(angle = 90, hjust = 1, face = "bold"),
legend.position = "right")
# Plot the runtime differences
# Create the data
combinations <- c(2, 3, 4, 5)
normal_runtime <- c(0.001279648, 0.018118033, 0.231115833, 8.696434)
#c(0.07677889, 1.087082, 13.86695, 521.78604)
parallel_runtime <- c(0.019332633, 0.061772267, 0.342696167, 1.232462)
#c(1.159958, 3.706336, 20.56177, 73.94772)
runtime_df <- data.frame(Combinations = combinations, Normal_Runtime = normal_runtime, Parallel_Runtime = parallel_runtime)
# Plotting the data
# Define the desired legend title and labels
legend_title <- "Type of generation"
legend_labels <- c("Normal Runtime", "Parallel Runtime")
ggplot(runtime_df, aes(x = Combinations)) +
geom_line(aes(y = Normal_Runtime, color = "Normal R"), size = 1) +
geom_line(aes(y = Parallel_Runtime, color = "Parallel Processing"), size = 1) +
labs(title = "Runtime Comparison for data generation",
x = "Combinations",
y = "Runtime (minuites)",
color = legend_title) +
theme_bw() +
theme(plot.title =  element_text(size= 14, hjust = 0.5, face ="bold"),
axis.text.x = element_text(angle = 90, hjust = 1, face = "bold"),
axis.text.y = element_text(angle = 90, hjust = 1, face = "bold"),
legend.position = "right")
# Create the data
combinations2 <- c(2, 3, 4, 5, 6, 7, 8, 9, 10)
columns2 <- c(351, 2951, 17901, 83681, 313911, 971711, 2533986, 5658536, 10970271)
file_size2 <- c(14, 115, 694, 3245, 12171, 37675, 98248, 219394, 425342)
# Create the dataframe
size_df <- data.frame(Combinations = combinations2, Columns = columns2, File_Size_MB = file_size2)
size_df
# Set up theme
dark_theme <- theme(
plot.background = element_rect(fill = "#444444"),
panel.background = element_rect(fill = "#444444"),
plot.title = element_text(color = "white", size = 18, face = "bold", hjust = 0.5),
axis.title = element_text(color = "white", size = 14, face = "bold"),
axis.text = element_text(color = "white", size = 12, face = "bold"),
legend.background = element_rect(fill = "#444444"),
legend.text = element_text(color = "white")
)
# Plotting the data with the dark theme
ggplot(runtime_df, aes(x = Combinations)) +
geom_line(aes(y = Normal_Runtime, color = 'Normal Runtime'), size = 1) +
geom_line(aes(y = Parallel_Runtime, color = 'Parallel Runtime'), size = 1) +
scale_color_manual(values = c('Normal Runtime' = '#00FF00', 'Parallel Runtime' = '#FF0000')) +
labs(
title = "Runtime Comparison for data generation",
x = "Combinations",
y = "Runtime (minutes)",
color = legend_title
) +
dark_theme +
theme(axis.text.x = element_text(angle = 90, hjust = 1),
axis.text.y = element_text(angle = 0, hjust = 1),
legend.position = "right")
# Create the data
combinations2 <- c(2, 3, 4, 5, 6, 7, 8, 9, 10)
columns2 <- c(351, 2951, 17901, 83681, 313911, 971711, 2533986, 5658536, 10970271)
file_size2 <- c(14, 115, 694, 3245, 12171, 37675, 98248, 219394, 425342)
# Create the dataframe
size_df <- data.frame(Combinations = combinations2, Columns = columns2, File_Size_MB = file_size2)
# Update theme to remove grid lines
dark_theme <- theme(
plot.background = element_rect(fill = "#444444"),
panel.background = element_rect(fill = "#444444"),
plot.title = element_text(color = "white", size = 18, face = "bold", hjust = 0.5),
axis.title = element_text(color = "white", size = 14, face = "bold"),
axis.text = element_text(color = "white", size = 12, face = "bold"),
legend.background = element_rect(fill = "#444444"),
legend.text = element_text(color = "white"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()
)
# Plotting the data with the updated dark theme and updated color for the lines
ggplot(runtime_df, aes(x = Combinations)) +
geom_line(aes(y = Normal_Runtime, color = 'Normal Runtime'), size = 1) +
geom_line(aes(y = Parallel_Runtime, color = 'Parallel Runtime'), size = 1) +
scale_color_manual(values = c('Normal Runtime' = 'white', 'Parallel Runtime' = 'gold')) +
labs(
title = "Runtime Comparison for data generation",
x = "Combinations",
y = "Runtime (minutes)",
color = legend_title
) +
dark_theme +
theme(axis.text.x = element_text(angle = 90, hjust = 1),
axis.text.y = element_text(angle = 0, hjust = 1),
legend.position = "right")
# Create the data
combinations2 <- c(2, 3, 4, 5, 6, 7, 8, 9, 10)
columns2 <- c(351, 2951, 17901, 83681, 313911, 971711, 2533986, 5658536, 10970271)
file_size2 <- c(14, 115, 694, 3245, 12171, 37675, 98248, 219394, 425342)
# Create the dataframe
size_df <- data.frame(Combinations = combinations2, Columns = columns2, File_Size_MB = file_size2)
size_df
size_df
